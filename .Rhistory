f<- (T_proj[j]/7+1):(T_proj[j]/7+T_sim/7)
points(weekly_dates[f]-3.5,
weekly_incidence[f],
pch=19,lwd=2,
col=col.scenarios[j])
#95%
pred_95 <- apply(weekly_proj[[j]],1,quantile,c(.5,.025,.975))
x<-weekly_dates[f]-3.5
lines(x,pred_95[1,],
type='l',lwd=2, col=col.scenarios[j])
#95%
polygon(c(x,rev(x)),
c(pred_95[2,],rev(pred_95[3,])),
col = col.scenarios.transp[j],border=NA)
lines(rep(x[1]-time_window-3.5,2),c(0,max(weekly_incidence)*1.2),
lty=3,col = col.scenarios[j],lwd=1.5)
lines(rep(x[1]-3.5,2),c(0,max(weekly_incidence)*1.2),
lty=5,col = col.scenarios[j],lwd=1.5)
}
# legend("topleft",c("Data","Fitted","IQR"),
#            col=c(col.scenarios[i],col.scenarios[i],
#                  col.scenarios.transp[i]),
#        lty=c(-1,1,-1),pch=c(19,-1,15),pt.cex=c(1,1,2),
#        lwd=c(2,2,1),cex=0.8,bty="n")
legend("topleft",c("Data","Fitted","95%CrI"),
col=c(col.scenarios[1],col.scenarios[1],
col.scenarios.transp[1]),
lty=c(-1,1,-1),pch=c(19,-1,15),pt.cex=c(1,1,2),
lwd=c(2,2,1),cex=0.8,bty="n")
}
get_plot_weekly(new_i, T_proj, projection, res )
get_plot_weekly <- function(new_i, T_proj, projection, res ){
# convert into weekly icidences
weekly_incidence <- daily_to_weekly(new_i$counts[1:(floor(length(new_i$counts)/7)*7)])
weekly_dates <- new_i$dates[seq(7, length(new_i$counts),by = 7)]
weekly_proj <-list()
for (i in 1:length(T_proj)){
temp <- matrix(NA,T_sim/7,1e3)
for (j in 1:1e3) {
temp[,j] <- daily_to_weekly(projection[[i]][,j])
}
weekly_proj[[i]] <- temp
}
# plot(new_i[1:(T_proj+T_sim)], proj = project_1)
col.scenarios <- c("Sc1"="#4f81bd","Sc2"="#9bbb59",
"Sc3"="#c0504d","Sc3"="#e67e00")
col.scenarios.transp <- paste(col.scenarios,"55",sep="")
########################
## ploting  #########
######################
par(oma=c(2,1.2,.5,0.1),mar=c(1.7,3,2,0.5))
mat <- matrix(c(1,1,1,2,2,2,2,2,2,2,2,2),3,3,byrow = TRUE)
layout(mat)
plot(res$R$dates,res$R$`Mean(R)`,
type='l',lwd=2,
col=col.scenarios[1],
xlim=c(min(new_i$dates),max(new_i$dates)),
ylim=c(0,5),
xlab='',ylab='',
main='',
xaxt  = 'n',yaxt='n',bty='n')
xlab <- seq(min(new_i$dates),max(new_i$dates),length.out = 8)
axis(side = 1, at = xlab,labels = xlab)
axis(side = 2, at = c(0,1,2,3,4))
mtext("R",2,3,outer=FALSE,las=0,adj=.5)
#95%
polygon(c(res$R$dates,rev(res$R$dates)),
c(res$R$`Quantile.0.025(R)`,rev(res$R$`Quantile.0.975(R)`)),
col = col.scenarios.transp[1],border=NA)
# critical
lines(res$R$dates,rep(1,length(res$R$dates)),lty=2,lwd=1.5,
col='red')
# time points
for (i in 1:length(T_proj)){
f <- which(res$R$dates %in% new_i$dates[T_proj[i]])
lines(rep(res$R$dates[f],2),c(0,6.2),
lty=5,col = col.scenarios[i],lwd=1.5)
}
lines(rep(x[1]-7/2,2),c(0,max(weekly_incidence)*1.2),
lty=5,col = col.scenarios[j],lwd=1.5)
plot(weekly_dates-3.5,weekly_incidence,
pch=1,lwd=2,
col='grey',
xlim=c(min(new_i$dates),max(new_i$dates)),
ylim=c(0,max(weekly_incidence)*1.1),
xlab='',ylab='',
main='',
xaxt  = 'n',yaxt='n',bty='n')
xlab <- seq(min(new_i$dates),max(new_i$dates),length.out = 8)
axis(side = 1, at = xlab,labels = xlab)
axis(side = 2, at = seq(0,800,length.out = 5))
mtext("Incidence (weekly)",2,3,outer=FALSE,las=0,adj=.5)
mtext("Date", 1, 2.5, outer=FALSE,padj=0,adj=.5)
for (j in 1:length(T_proj)){
f<- ((T_proj[j]-time_window)/7+1):(T_proj[j]/7)
points(weekly_dates[f]-3.5,
weekly_incidence[f],
pch=1,lwd=2,
col=col.scenarios[j])
f<- (T_proj[j]/7+1):(T_proj[j]/7+T_sim/7)
points(weekly_dates[f]-3.5,
weekly_incidence[f],
pch=19,lwd=2,
col=col.scenarios[j])
#95%
pred_95 <- apply(weekly_proj[[j]],1,quantile,c(.5,.025,.975))
x<-weekly_dates[f]-3.5
lines(x,pred_95[1,],
type='l',lwd=2, col=col.scenarios[j])
#95%
polygon(c(x,rev(x)),
c(pred_95[2,],rev(pred_95[3,])),
col = col.scenarios.transp[j],border=NA)
lines(rep(x[1]-time_window-3.5,2),c(0,max(weekly_incidence)*1.2),
lty=3,col = col.scenarios[j],lwd=1.5)
lines(rep(x[1]-3.5,2),c(0,max(weekly_incidence)*1.2),
lty=5,col = col.scenarios[j],lwd=1.5)
}
# legend("topleft",c("Data","Fitted","IQR"),
#            col=c(col.scenarios[i],col.scenarios[i],
#                  col.scenarios.transp[i]),
#        lty=c(-1,1,-1),pch=c(19,-1,15),pt.cex=c(1,1,2),
#        lwd=c(2,2,1),cex=0.8,bty="n")
legend("topleft",c("Data","Fitted","95%CrI"),
col=c(col.scenarios[1],col.scenarios[1],
col.scenarios.transp[1]),
lty=c(-1,1,-1),pch=c(19,-1,15),pt.cex=c(1,1,2),
lwd=c(2,2,1),cex=0.8,bty="n")
}
get_plot_weekly(new_i, T_proj, projection, res )
png("Proj1.png",width=800,height=500,res=200)
get_plot_weekly(new_i, T_proj, projection, res )
dev.off()
png("Proj1.png",width=1600,height=1000,res=200)
get_plot_weekly(new_i, T_proj, projection, res )
dev.off()
rm(list=ls())
library(devtools)
install_github("annecori/mRIIDSprocessData")
library(mRIIDSprocessData)
###############################
### arguments that user may want to change
###############################
spec <- "Humans"
disease <- "Ebola"
### for now looking at suspected and confirmed cases ###
case_type <- "SCC"
### location of interest ###
location <- "Sierra Leone"
####################################
### read in Healthmap data ###
####################################
### file in which data is stored ###
# filename <- "~/Dropbox/mRIIDS/data/CaseCounts/raw/HealthMap_Ebola_GNE_WHO.csv"
filename<- '~/../Dropbox (SPH Imperial College)/mRIIDS/data/CaseCounts/raw/HealthMap_Ebola_GNE_WHO.csv'
dat <- read.csv(filename, stringsAsFactors = FALSE)
####################################
### test get_incid_DS1 function ###
####################################
incid <- get_incid_DS1(dat,
spec,
disease,
case_type,
location,
merge_rule = "median")
### visualise incidence
par(mfrow=c(2,2))
plot(incid$dates, incid$cum_incid, type="l", xlab="Time", ylab="Cumulative Incidence", xlim= c(as.Date("2014-01-01"), as.Date("2016-12-12")))
plot(incid$dates, incid$incid, type="l", xlab="Time", ylab="Incidence", xlim= c(as.Date("2014-01-01"), as.Date("2016-12-12")))
### To do: add our estimate of daily incidence
##############################################################################################################################
####################################
### Estimate Reproudction Number  ###
####################################
library('EpiEstim')
# specify a serial interval distribution
mean_SI <- 14.2
CV_SI <- 9.6/14.2 # from http://www.nejm.org/doi/suppl/10.1056/NEJMc1414992/suppl_file/nejmc1414992_appendix.pdf
SItrunc <- 40
SI_Distr <- sapply(0:SItrunc, function(e) DiscrSI(e,mean_SI,mean_SI*CV_SI) )
SI_Distr <- SI_Distr / sum(SI_Distr)
# specify time windows for R estimation
time_window<-7*7
Start <- 3:(length(incid$dates)-time_window)
End <- Start+time_window
#estimate the reproduction number over time
res <- EstimateR( incid$incid , T.Start=Start , T.End=End ,
method="NonParametricSI", SI.Distr= SI_Distr ,
plot=FALSE , CV.Posterior=1 , Mean.Prior=1 , Std.Prior=0.5)
res$R <- cbind(res$R,incid$dates[res$R$T.End])
names(res$R) <- c(names(res$R)[1:11],'dates')
####################################
###   Project case forward       ###
####################################
source('useful.R')
# projections
T_proj <- 7*c(21,43,64)
T_sim <- 7*7
# transform incidence to incidence object
new_i <- as.incidence(matrix(incid$incid,length(incid$incid),1), incid$dates)
new_i$dates <- incid$dates
new_i$counts <- matrix(incid$incid,nrow(incid),1)
new_i$timespan <- as.numeric(diff(range(new_i$dates, na.rm = TRUE))) + 1
new_i$n <- sum(new_i$counts)
projection <- get_projection(T_proj , T_sim  , new_i  , res )
####################################
###  Plot data and projections   ###
####################################
png("Proj1.png",width=1600,height=1000,res=200)
get_plot_weekly(new_i, T_proj, projection, res )
dev.off()
rm(list=ls())
library(devtools)
install_github("annecori/mRIIDSprocessData")
library(mRIIDSprocessData)
###############################
### arguments that user may want to change
###############################
spec <- "Humans"
disease <- "Ebola"
### for now looking at suspected and confirmed cases ###
case_type <- "SCC"
### location of interest ###
location <- "Sierra Leone"
####################################
### read in Healthmap data ###
####################################
### file in which data is stored ###
# filename <- "~/Dropbox/mRIIDS/data/CaseCounts/raw/HealthMap_Ebola_GNE_WHO.csv"
filename<- '~/../Dropbox (SPH Imperial College)/mRIIDS/data/CaseCounts/raw/HealthMap_Ebola_GNE_WHO.csv'
dat <- read.csv(filename, stringsAsFactors = FALSE)
####################################
### test get_incid_DS1 function ###
####################################
incid <- get_incid_DS1(dat,
spec,
disease,
case_type,
location,
merge_rule = "median")
### visualise incidence
par(mfrow=c(2,2))
plot(incid$dates, incid$cum_incid, type="l", xlab="Time", ylab="Cumulative Incidence", xlim= c(as.Date("2014-01-01"), as.Date("2016-12-12")))
plot(incid$dates, incid$incid, type="l", xlab="Time", ylab="Incidence", xlim= c(as.Date("2014-01-01"), as.Date("2016-12-12")))
### To do: add our estimate of daily incidence
##############################################################################################################################
####################################
### Estimate Reproudction Number  ###
####################################
library('EpiEstim')
# specify a serial interval distribution
mean_SI <- 14.2
CV_SI <- 9.6/14.2 # from http://www.nejm.org/doi/suppl/10.1056/NEJMc1414992/suppl_file/nejmc1414992_appendix.pdf
SItrunc <- 40
SI_Distr <- sapply(0:SItrunc, function(e) DiscrSI(e,mean_SI,mean_SI*CV_SI) )
SI_Distr <- SI_Distr / sum(SI_Distr)
# specify time windows for R estimation
time_window<-7*7
Start <- 3:(length(incid$dates)-time_window)
End <- Start+time_window
#estimate the reproduction number over time
res <- EstimateR( incid$incid , T.Start=Start , T.End=End ,
method="NonParametricSI", SI.Distr= SI_Distr ,
plot=FALSE , CV.Posterior=1 , Mean.Prior=1 , Std.Prior=0.5)
res$R <- cbind(res$R,incid$dates[res$R$T.End])
names(res$R) <- c(names(res$R)[1:11],'dates')
####################################
###   Project case forward       ###
####################################
source('useful.R')
# projections
T_proj <- 7*c(21,43,64)
T_sim <- 7*7
# transform incidence to incidence object
new_i <- as.incidence(matrix(incid$incid,length(incid$incid),1), incid$dates)
new_i$dates <- incid$dates
new_i$counts <- matrix(incid$incid,nrow(incid),1)
new_i$timespan <- as.numeric(diff(range(new_i$dates, na.rm = TRUE))) + 1
new_i$n <- sum(new_i$counts)
projection <- get_projection(T_proj , T_sim  , new_i  , res )
####################################
###  Plot data and projections   ###
####################################
png("Proj1.png",width=1600,height=1000,res=200)
get_plot_weekly(new_i, T_proj, projection, res )
dev.off()
incid$incid[1:200]
new_i <- as.incidence(matrix(incid$incid,length(incid$incid),1), incid$dates)
new_i$counts[1:200]
paste0(root,file,1)
root <- '../../../Dropbox (SPH Imperial College)/mRIIDS/data/Geography/GravityModel/processed/'
root <- '../../../Dropbox (SPH Imperial College)/mRIIDS/data/Geography/GravityModel/processed/'
paste0(root,file,1)
i =1
load(paste0(root,file,i))
paste0(root,file,i)
load(paste0(root,file,i,',csv'))
pth <- '../../../Dropbox (SPH Imperial College)/mRIIDS/data/Geography/GravityModel/processed/'
load(paste0(pth,file,i,',csv'))
pth
file
file <- 'estimated_flow_from_to_gravity_model_powers_Nfrom_1_Nto_1_dist_'
pth <- '../../../Dropbox (SPH Imperial College)/mRIIDS/data/Geography/GravityModel/processed/'
i =1
load(paste0(pth,file,i,',csv'))
aste0(pth,file,i,',csv')
paste0(pth,file,i,',csv')
getwd()
pth <- '../../Dropbox (SPH Imperial College)/mRIIDS/data/Geography/GravityModel/processed/'
i =1
load(paste0(pth,file,i,',csv'))
file <- '../../../Dropbox (SPH Imperial College)/mRIIDS/data/Geography/GravityModel/processed/estimated_flow_from_to_gravity_model_powers_Nfrom_1_Nto_1_dist_1.csv'
load(file)
load(file)
file <- '../../../Dropbox (SPH Imperial College)/mRIIDS/data/Geography/GravityModel/processed/estimated_flow_from_to_gravity_model_powers_Nfrom_1_Nto_1_dist_1pn.csv'
load(file)
read.table(file)
load(file)
read.table(file)
load(file)
file <- '../../../Dropbox (SPH Imperial College)/mRIIDS/data/Geography/GravityModel/processed/estimated_flow_from_to_gravity_model_powers_Nfrom_1_Nto_1_dist_1pn.csv'
load(file)
read.table(file)
read.csv(file)
flow=read.csv(file)
View(flow)
names(flow)
a=flow[,253:257]
View(a)
file <- 'estimated_flow_from_to_gravity_model_powers_Nfrom_1_Nto_1_dist_'
pth <- '../../Dropbox (SPH Imperial College)/mRIIDS/data/Geography/GravityModel/processed/'
i =1
flow <- read.csv(paste0(pth,file,i,'pn.csv'), stringsAsFactors = FALSE)
pth <- '../../../Dropbox (SPH Imperial College)/mRIIDS/data/Geography/GravityModel/processed/'
i =1
flow <- read.csv(paste0(pth,file,i,'pn.csv'), stringsAsFactors = FALSE)
countries_names <- names(flow)[-1]
View(flow)
which(countries_names %in% location)
rm(list=ls())
library(devtools)
install_github("annecori/mRIIDSprocessData")
library(mRIIDSprocessData)
###############################
### arguments that user may want to change
###############################
spec <- "Humans"
disease <- "Ebola"
### for now looking at suspected and confirmed cases ###
case_type <- "SCC"
### location of interest ###
location <- "Sierra Leone"
####################################
### read in Healthmap data ###
####################################
### file in which data is stored ###
# filename <- "~/Dropbox/mRIIDS/data/CaseCounts/raw/HealthMap_Ebola_GNE_WHO.csv"
filename<- '~/../Dropbox (SPH Imperial College)/mRIIDS/data/CaseCounts/raw/HealthMap_Ebola_GNE_WHO.csv'
dat <- read.csv(filename, stringsAsFactors = FALSE)
####################################
### test get_incid_DS1 function ###
####################################
incid <- get_incid_DS1(dat,
spec,
disease,
case_type,
location,
merge_rule = "median")
### visualise incidence
par(mfrow=c(2,2))
plot(incid$dates, incid$cum_incid, type="l", xlab="Time", ylab="Cumulative Incidence", xlim= c(as.Date("2014-01-01"), as.Date("2016-12-12")))
plot(incid$dates, incid$incid, type="l", xlab="Time", ylab="Incidence", xlim= c(as.Date("2014-01-01"), as.Date("2016-12-12")))
### To do: add our estimate of daily incidence
##############################################################################################################################
####################################
### Estimate Reproudction Number  ###
####################################
library('EpiEstim')
# specify a serial interval distribution
mean_SI <- 14.2
CV_SI <- 9.6/14.2 # from http://www.nejm.org/doi/suppl/10.1056/NEJMc1414992/suppl_file/nejmc1414992_appendix.pdf
SItrunc <- 40
SI_Distr <- sapply(0:SItrunc, function(e) DiscrSI(e,mean_SI,mean_SI*CV_SI) )
SI_Distr <- SI_Distr / sum(SI_Distr)
# specify time windows for R estimation
time_window<-7*7
Start <- 3:(length(incid$dates)-time_window)
End <- Start+time_window
#estimate the reproduction number over time
res <- EstimateR( incid$incid , T.Start=Start , T.End=End ,
method="NonParametricSI", SI.Distr= SI_Distr ,
plot=FALSE , CV.Posterior=1 , Mean.Prior=1 , Std.Prior=0.5)
res$R <- cbind(res$R,incid$dates[res$R$T.End])
names(res$R) <- c(names(res$R)[1:11],'dates')
####################################
###   Project case forward       ###
####################################
source('useful.R')
# projections
T_proj <- 7*c(21,43,64)
T_sim <- 7*7
# transform incidence to incidence object
new_i <- as.incidence(matrix(incid$incid,length(incid$incid),1), incid$dates)
new_i$dates <- incid$dates
new_i$counts <- matrix(incid$incid,nrow(incid),1)
new_i$timespan <- as.numeric(diff(range(new_i$dates, na.rm = TRUE))) + 1
new_i$n <- sum(new_i$counts)
projection <- get_projection(T_proj , T_sim  , new_i  , res )
####################################
###  Plot data and projections   ###
####################################
png("Proj1.png",width=1600,height=1000,res=200)
get_plot_weekly(new_i, T_proj, projection, res )
dev.off()
file <- 'estimated_flow_from_to_gravity_model_powers_Nfrom_1_Nto_1_dist_'
pth <- '../../../Dropbox (SPH Imperial College)/mRIIDS/data/Geography/GravityModel/processed/'
i =1
flow <- read.csv(paste0(pth,file,i,'pn.csv'), stringsAsFactors = FALSE)
countries_names <- names(flow)[-1]
which(countries_names %in% location)
location
countries_names
countries_names <- flow[,1]
countries_names
which(countries_names %in% location)
flow_loc <- flow[,which(countries_names %in% location) + 1]
flow_loc
rel_prob <- flow[,which(countries_names %in% location) + 1]/
sum(flow[,which(countries_names %in% location) + 1])
rel_prob
rel_prob <- flow[,which(countries_names %in% location) + 1]/
sum(flow[,which(countries_names %in% location) + 1],na.rm=TRUE)
rel_prob
hist(rel_prob)
names(rel_prob) <- c('country','rel_prob')
countries_names <- flow[,1]
rel_prob <- flow[,which(countries_names %in% location) + 1]/
sum(flow[,which(countries_names %in% location) + 1],na.rm=TRUE)
rel_prob <- cbind(flow[,1],rel_prob)
names(rel_prob) <- c('country','rel_prob')
View(rel_prob)
rm(rel_prob)
countries_names <- flow[,1]
rel_prob <- flow[,which(countries_names %in% location) + 1]/
sum(flow[,which(countries_names %in% location) + 1],na.rm=TRUE)
rel_prob <- cbind(flow[,1],rel_prob)
names(rel_prob)
View(rel_prob)
rel_prob <- flow[,which(countries_names %in% location) + 1]/
sum(flow[,which(countries_names %in% location) + 1],na.rm=TRUE)
risk <- data.frame(country=flow[,1],rel_prob=rel_prob)
View(risk)
order(risk$rel_prob)
risk <- risk[order(risk$rel_prob),]
View(risk)
risk <- risk[order(risk$rel_prob,decreasing=FALSE),]
View(risk)
risk <- risk[order(risk$rel_prob,decreasing=TRUE),]
View(risk)
write.csv(risk, file=paste(pth,'est_risk.csv'))
for (i in 1:2){
flow <- read.csv(paste0(pth,file,i,'pn.csv'), stringsAsFactors = FALSE)
countries_names <- flow[,1]
rel_prob <- flow[,which(countries_names %in% location) + 1]/
sum(flow[,which(countries_names %in% location) + 1],na.rm=TRUE)
risk <- data.frame(country=flow[,1],rel_prob=rel_prob)
risk <- risk[order(risk$rel_prob,decreasing=TRUE),]
write.csv(risk, file=paste(pth,'est_risk_dist',i,'.csv'))
}
p_travel <- c(1:5)*1e-2
p_travel
p_travel <- c(1:5)*1e-2
for (j in 1:length(p_travel)) N_travel <- rbinom(projection[[1]][,j],p_travel[j])
dim(projection)
for (j in 1:2) T_proj_case <- colSums(projection[[i]])
dim(projection)]
for (j in 1:2) T_proj_case[j] <- colSums(projection[[i]])
T_proj_case <- rep(NA,2)
for (j in 1:2) T_proj_case[j] <- colSums(projection[[i]])
T_proj_case <- matrix(NA,1e3,2)
for (j in 1:2) T_proj_case[,j] <- colSums(projection[[i]])
mean(T_proj[,1])
mean(T_proj_case[,1])
mean(T_proj_case[,2])
T_proj_case <- matrix(NA,2,1e3)
for (j in 1:2) T_proj_case[,j] <- colSums(projection[[i]])
T_proj_case <- matrix(NA,2,1e3)
for (j in 1:2) T_proj_case[j,] <- colSums(projection[[i]])
mean(T_proj_case[1,])
mean(T_proj_case[2,])
p_travel <- c(1:5)*1e-2
T_proj_case <- matrix(NA,2,1e3)
for (j in 1:2) T_proj_case[j,] <- colSums(projection[[j]])
mean(T_proj_case[2,])
mean(T_proj_case[1,])
N_travel <- matrix(NA,2,1e3)
p_travel <- c(1:5)*1e-2
T_proj_case <- matrix(NA,2,1e3)
N_travel <- matrix(NA,2,1e3)
for (j in 1:2) {
T_proj_case[j,] <- colSums(projection[[j]])
N_travel[j] <- rbinom(1e3,T_proj_case[j,],p_travel[j])
}
p_travel <- c(1:5)*1e-2
N_travel <- matrix(NA,2,1e3)
T_proj_case <- matrix(NA,2,1e3)
for (j in 1:2) {
T_proj_case[j,] <- colSums(projection[[j]])
N_travel[j,] <- rbinom(1e3,T_proj_case[j,],p_travel[j])
}
mean(N_travel[1,])
mean(N_travel[2,])
